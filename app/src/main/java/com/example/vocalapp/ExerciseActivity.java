package com.example.vocalapp;

import android.content.Intent;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.support.v7.widget.Toolbar;
import android.util.Log;
import android.view.View;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;
import com.google.gson.Gson;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;


/**
 * Activity for playing Vocal Exercise
 *
 * Creates Exercise object from loaded JSON. Displays and controls the player
 * which plays or stops the vocal exercise.
 *
 * Future Functionality: Display instructions for the exercise and give a visual representation of
 * the exercise.
 *
 * @author John Batty
 * @author Sheldyn Smith
 * @author Michelle Landen
 * @version 0.0.1
 * @since 0.0.0
 */
public class ExerciseActivity extends AppCompatActivity {

    /**
     * Constant for the filename stored in the Intent
     */
    public static final String FILE_NAME = "fileName";

    /**
     * Exercise Object created from JSON
     */
    protected Exercise exercise;

    /**
     * Vocal range of the user taken from Intent
     */
    protected String vocalRange;

    /**
     * name of JSON file to be loaded. Taken from Intent.
     */
    private String fileName;

    /**
     * Activity Specific Tag for Logging and Debugging
     */
    private static final String TAG = "ExerciseActivity";

    /**
     * Instructions for chosen exercise
     */
    private String instructions;

    /** TextViews for individual exercises */
    public TextView exerciseName, exerciseInstruct;

    /** TextView for showing a text-only breadcrumb */
    public TextView breadcrumb;

    /** String for name of activity group */
    public String activity;

    private String waitMessage;

    /** Called when app opens
     *
     * Instanciates the activity_exercise layout, the toolbar, and retrieves Intent
     * information from the Exercise activity. Sets the textViews for the text-only
     * breadcrumb, the exercise name, the exercise image, and the exercise instructions.
     *
     * @param savedInstanceState The save state automatically generated by Android
     */
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_exercise);

        // added for menu bar
        Toolbar appToolbar = findViewById(R.id.menu_bar);
        setSupportActionBar(appToolbar);

        //Retrieve Information from Intent
        Intent intent = getIntent();
        fileName = intent.getStringExtra(FILE_NAME);
        vocalRange = intent.getStringExtra(VocalRangeActivity.VOCAL_RANGE);

        loadJSON();

        // exercise name displayed at top of view
        exerciseName = findViewById(R.id.name_text);
        exerciseName.setText(exercise.getName());


        ImageView notationImage = findViewById(R.id.notationImage);

        // intent to get exercise instructions
        instructions = exercise.getDescription();

        // exercise instructions display in view
        exerciseInstruct = findViewById(R.id.instruction_text);
        exerciseInstruct.setText(instructions);

        // the JSON must be loaded into the Exercise before this function is called
        String imageLocation = "@drawable/" + exercise.getImageName();
        int imageResource = getResources().getIdentifier(imageLocation, null, this.getPackageName());
        notationImage.setImageResource(imageResource);

        waitMessage = "Please wait for sounds to finish loading";

        // text-only breadcrumb pane
        // build breadcrumb
        activity = exercise.getActivityGroup();
        StringBuilder sb = new StringBuilder();
        sb.append(activity);
        sb.append(" < ");
        sb.append(exercise.getVocalRange());
        sb.append(" < ");
        sb.append(exercise.getName());
        // display breadcrumb
        breadcrumb = findViewById(R.id.breadcrumb);
        breadcrumb.setText(sb);
    }

    /**
     * Plays the Exercise. Called from Play Button on Screen.
     */
    public void playExercise(View view) {

        if (!exercise.isLoading()) {
            exercise.runExercise();
        }
        else {
            Toast.makeText(this, waitMessage, Toast.LENGTH_SHORT).show();
        }
    }

    /**
     * Stops the Exercise. Called from Stop Button on Screen.
     */
    public void stopExercise(View view) {
        exercise.cancelExercise();
    }

    /**
     * Cancels the exercise if one is playing
     */
    @Override
    protected void onDestroy() {
        super.onDestroy();
        exercise.cancelExercise();
    }

    /**
     * Loads the JSON file specified in Intent. Creates a new Exercise object and fills all
     * fields using the data found in specified file.
     */
    public void loadJSON() {
        try {
            Gson g = new Gson();
            Log.i(TAG, "loadJSON - fileName: " + fileName);

            //Read JSON into InputStream
            InputStream ins = getResources().openRawResource(
                    getResources().getIdentifier(fileName,
                            "raw", getPackageName()));
            Reader reader = new InputStreamReader(ins, "UTF-8");

            //Create exercise Object
            exercise = new Exercise();
            exercise = g.fromJson(reader, exercise.getClass());
            exercise.setVocalRange(vocalRange);
        } catch (Exception e) {
            Log.w(TAG, "loadJSON: ", e);
        }
    }

}
